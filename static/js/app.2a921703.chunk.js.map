{"version":3,"sources":["components/appbar.tsx","components/button.tsx","App.tsx"],"names":["AppHeader","props","View","style","styles","container","Text","textStyle","this","title","React","StyleSheet","create","fontSize","fontWeight","shadowColor","shadowOffset","width","height","shadowOpacity","shadowRadius","elevation","alignItems","justifyContent","backgroundColor","CustomButton","buttonSurrounding","TouchableOpacity","button","onPress","Component","color","borderRadius","marginTop","marginLeft","fontFamily","App","state","speak","thingToSay","trim","length","alert","test","thingToSayWithFormatting","toLowerCase","Speech","onTextInputTextChanged","text","setState","textToSpeechImageSurrounding","Image","source","uri","textToSpeechImage","textInputSurrounding","TextInput","textInput","onChangeText","windowSize","Dimensions","get","paddingTop","paddingLeft","borderWidth","borderColor"],"mappings":"yrBAOMA,E,gCACJ,WAAYC,GAAe,+BACnBA,G,6CAIN,OACE,gBAACC,EAAA,EAAD,CAAMC,MAAOC,EAAOC,WAClB,gBAACC,EAAA,EAAD,CAAMH,MAAOC,EAAOG,WAAYC,KAAKP,MAAMQ,Y,GAR3BC,aAclBN,EAASO,IAAWC,OAAO,CAC/BL,UAAW,CACTM,SAAU,GACVC,WAAY,QAEdT,UAAW,CACTU,YAAa,QACbC,aAAc,CAAEC,MAAO,EAAGC,OAAQ,GAClCC,cAAe,GACfC,aAAc,EACdC,UAAW,EACXC,WAAY,SACZC,eAAgB,SAChBL,OAAQ,GACRM,gBAAiB,UAINxB,I,sbC1BMyB,E,gCAElB,WAAYxB,GAAe,+BAClBA,G,6CAKR,OACE,kBAACC,EAAA,EAAD,CAAMC,MAAOC,EAAOI,KAAKP,OAAOyB,mBAC9B,kBAACC,EAAA,EAAD,CACExB,MAAOC,EAAOI,KAAKP,OAAO2B,OAC1BC,QAASrB,KAAKP,MAAM4B,WACpB,kBAACvB,EAAA,EAAD,CAAMH,MAAOC,EAAOI,KAAKP,OAAOM,WAAYC,KAAKP,MAAMQ,a,GAbvBqB,aAoBpC1B,EAAS,SAACH,GAAD,OACbU,IAAWC,OAAO,CAChBgB,OAAQ,CACNJ,gBAAiBvB,EAAM8B,MACvBR,eAAgB,SAChBD,WAAY,SACZL,MAAOhB,EAAMgB,MACbC,OAAQ,GACRc,aAAc,IAEhBN,kBAAmB,CACjBO,UAAWhC,EAAMgC,UACjBC,WAAYjC,EAAMiC,YAEpB3B,UAAW,CACTM,SAAU,GACVkB,MAAO,QACPI,WAAY,UACZrB,WAAY,W,sbCnCGsB,E,gCAEnB,WAAYnC,EAAcoC,GAAe,IAAD,sBACtC,cAAMpC,EAAOoC,IAOfC,MAAQ,WAGN,IAAIC,EAAqB,EAAKF,MAAME,WAIpC,GAAkB,MAAdA,GAAkD,GAA5BA,EAAWC,OAAOC,OAE1C,OADAC,MAAM,kDACC,KACF,GALc,+CAKHC,KAAKJ,GAErB,OADAG,MAAM,6DACC,KAGT,IAAIE,EAA2BL,EAAWM,cAAcL,OAExDM,IAAaF,IAzByB,EA4BxCG,uBAAyB,SAACC,GACxB,EAAKC,SAAS,CACZV,WAAYS,KA3Bd,EAAKX,MAAQ,CACXE,WAAY,IAJwB,E,6CAkC9B,IAAD,OACP,OACE,kBAACrC,EAAA,EAAD,KACE,kBAAC,EAAD,CAAWO,MAAM,mBACjB,kBAACP,EAAA,EAAD,CAAMC,MAAOC,EAAO8C,8BAClB,kBAACC,EAAA,EAAD,CAAOC,OAAQ,CAAEC,IAAK,iEAAmElD,MAAOC,EAAOkD,qBAEzG,kBAACpD,EAAA,EAAD,CAAMC,MAAOC,EAAOmD,sBAClB,kBAACC,EAAA,EAAD,CAAWrD,MAAOC,EAAOqD,UAAWC,aAAclD,KAAKuC,0BAEzD,kBAAC7C,EAAA,EAAD,KACE,kBAAC,EAAD,CAAce,MAAO0C,EAAW1C,MAAQ,EAAGY,QAAS,kBAAM,EAAKS,OAAO7B,MAAM,QAAQsB,MAAM,SAASE,UAAW,GAAIC,WAAYyB,EAAW1C,MAAQ,EAAI0C,EAAW1C,MAAQ,U,GA/CjJP,IAAMoB,WAsDnC6B,EAAkBC,IAAWC,IAAI,UAE/BzD,EAASO,IAAWC,OAAO,CAC/B2C,qBAAsB,CACpBO,WAAY,GACZC,YAAaJ,EAAW1C,MAAQ,EAAK0C,EAAW1C,MAAQ,GAE1DwC,UAAW,CACTM,YAAa,GACbvC,gBAAiB,UACjBwC,YAAa,EACbC,YAAa,QACbhD,MAAO0C,EAAW1C,MAAQ,EAC1BC,OAAQyC,EAAWzC,OAAS,GAC5Bc,aAAc2B,EAAWzC,OAAS,GAClCL,SAAU,IAEZqC,6BAA8B,CAC5BY,WAAY,GACZC,YAAaJ,EAAW1C,MAAQ,EAAK0C,EAAW1C,MAAQ,IAE1DqC,kBAAmB,CACjBrC,MAAO0C,EAAW1C,MAAQ,EAC1BC,OAAQyC,EAAW1C,MAAQ,M","file":"static/js/app.2a921703.chunk.js","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\n\nexport interface Props {\n  title: String,\n}\n\nclass AppHeader extends React.Component<Props> {\n  constructor(props: Props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <View style={styles.container}>\n        <Text style={styles.textStyle}>{this.props.title}</Text>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  textStyle: {\n    fontSize: 20,\n    fontWeight: \"bold\"\n  },\n  container: {\n    shadowColor: 'black',\n    shadowOffset: { width: 0, height: 2 },\n    shadowOpacity: 0.5,\n    shadowRadius: 2,\n    elevation: 2,    \n    alignItems: \"center\",\n    justifyContent: \"center\",\n    height: 60,\n    backgroundColor: \"cyan\"\n  },\n});\n\nexport default AppHeader;","//importing the libraries\nimport React, { Component } from 'react';\nimport { Text, View, TouchableOpacity, StyleSheet, ColorValue } from 'react-native';\n\nexport interface Props {\n   onPress: () => any,\n   title: String,\n   color: ColorValue,\n   width: number,\n   marginTop: number,\n   marginLeft: number\n}\n\nexport default class CustomButton extends Component<Props> {\n\n   constructor(props: Props) {\n      super(props);\n\n   }\n\n  render() {\n    return (\n      <View style={styles(this.props).buttonSurrounding}>\n        <TouchableOpacity\n          style={styles(this.props).button}\n          onPress={this.props.onPress()}>\n          <Text style={styles(this.props).textStyle}>{this.props.title}</Text>\n        </TouchableOpacity>\n      </View>\n    );\n  }\n}\n\nconst styles = (props: Props) =>\n  StyleSheet.create({\n    button: {\n      backgroundColor: props.color,\n      justifyContent: 'center',\n      alignItems: 'center',\n      width: props.width,\n      height: 55,\n      borderRadius: 28\n    },\n    buttonSurrounding: {\n      marginTop: props.marginTop,\n      marginLeft: props.marginLeft,\n    },\n    textStyle: {\n      fontSize: 20,\n      color: 'white',\n      fontFamily: 'cursive',\n      fontWeight: 'bold',\n    },\n  });","import React from 'react';\nimport { StyleSheet, Text, View, TextInput, Dimensions, Image } from 'react-native';\nimport AppHeader from './components/appbar';\nimport CustomButton from './components/button';\nimport * as Speech from 'expo-speech';\n\ninterface Props {\n\n}\n\ninterface State {\n  thingToSay: string\n}\n\n// let windowSize = useWindowDimensions();\n\nexport default class App extends React.Component<Props, State> {\n\n  constructor(props: Props, state: State) {\n    super(props, state);\n\n    this.state = {\n      thingToSay: ''\n    }\n  }\n\n  speak = (): any => {\n\n\n    let thingToSay: string = this.state.thingToSay;\n\n    let format: RegExp = /[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?`~Â¨]+/;\n\n    if (thingToSay == null || thingToSay.trim().length == 0) {\n      alert('Please enter a sentence or a word to be spoken');\n      return null;\n    } else if (format.test(thingToSay)) {\n      alert('Please ensure that you don\\'t write any special characters');\n      return null;\n    }\n\n    let thingToSayWithFormatting = thingToSay.toLowerCase().trim();\n\n    Speech.speak(thingToSayWithFormatting)\n  }\n\n  onTextInputTextChanged = (text: string): void => {\n    this.setState({\n      thingToSay: text\n    })\n  }\n\n  render() {\n    return (\n      <View>\n        <AppHeader title='Text To Speech'></AppHeader>\n        <View style={styles.textToSpeechImageSurrounding}>\n          <Image source={{ uri: 'https://miro.medium.com/max/2560/1*LyLWfbHfFUG_OyyGSwK-_w.png' }} style={styles.textToSpeechImage} />\n        </View>\n        <View style={styles.textInputSurrounding}>\n          <TextInput style={styles.textInput} onChangeText={this.onTextInputTextChanged} />\n        </View>\n        <View>\n          <CustomButton width={windowSize.width / 4} onPress={() => this.speak} title='Speak' color='purple' marginTop={30} marginLeft={windowSize.width / 2 - windowSize.width / 8} />\n        </View>\n      </View>\n    );\n  }\n}\n\nvar windowSize: any = Dimensions.get('window');\n\nconst styles = StyleSheet.create({\n  textInputSurrounding: {\n    paddingTop: 20.0,\n    paddingLeft: windowSize.width / 2 - (windowSize.width / 4)\n  },\n  textInput: {\n    paddingLeft: 10,\n    backgroundColor: \"#ededed\",\n    borderWidth: 4,\n    borderColor: 'black',\n    width: windowSize.width / 2,\n    height: windowSize.height / 12,\n    borderRadius: windowSize.height / 12,\n    fontSize: 20\n  },\n  textToSpeechImageSurrounding: {\n    paddingTop: 20,\n    paddingLeft: windowSize.width / 2 - (windowSize.width / 10)\n  },\n  textToSpeechImage: {\n    width: windowSize.width / 5,\n    height: windowSize.width / 5,\n  },\n});\n"],"sourceRoot":""}